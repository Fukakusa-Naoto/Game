//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file		SoundPlyer.h
//!
//! @summary	サウンドプレイヤークラスのヘッダファイル
//!
//! @date		2018.10.12
//!
//! @author		深草直斗
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルードの防止 =========================================================
#pragma once


// ヘッダファイルの読み込み =======================================================
// <標準ヘッダファイル>
#include <cri_adx2le.h>


// 名前空間の定義 ================================================================
namespace Library
{
	namespace Sound
	{
		// クラスの定義 ==========================================================
		class SoundPlayer
		{
			// <メンバ変数>
			CriAtomExAcbHn m_acbHandle;
			CriAtomExPlayerHn m_player;


			// <コンストラクタ>
		public:
			//--------------------------------------------------------------
			//! @parameter [void] なし
			//--------------------------------------------------------------
			SoundPlayer();


			// <デストラクタ>
		public:
			~SoundPlayer();


			// <メンバ関数>
		public:
			//--------------------------------------------------------------
			//! @summary   サウンドプレイヤーの作成
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Create();


			//--------------------------------------------------------------
			//! @summary   Acbファイルの読み込み
			//!
			//! @parameter [acb] Acbファイル名
			//! @parameter [awb] Awbファイル名
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void LoadAcb(const char *acb, const char *awb = nullptr);


			//--------------------------------------------------------------
			//! @summary   サウンドプレイヤーの開放処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Release();




			//--------------------------------------------------------------
			//! @summary   指定キューの再生
			//!
			//! @parameter [cueID] 再生したいキューID
			//! @parameter [volume] 音量
			//!
			//! @return    プレイバックID
			//--------------------------------------------------------------
			CriAtomExPlaybackId Play(CriAtomExCueId cueID, float volume = 1.0f);


			//--------------------------------------------------------------
			//! @summary   音量の設定
			//!
			//! @parameter [volume] 音量
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void SetVolume(float volume);


			//--------------------------------------------------------------
			//! @summary   指定した音の音量の設定
			//!
			//! @parameter [playbackID] プレイバックID
			//! @parameter [volume] 音量
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void SetVolume(CriAtomExPlaybackId playbackID, float volume);


			//--------------------------------------------------------------
			//! @summary   サウンドプレイヤーのポーズ
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Pause();


			//--------------------------------------------------------------
			//! @summary   指定した音をポーズする
			//!
			//! @parameter [playbackID] プレイバックID
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Pause(CriAtomExPlaybackId playbackID);


			//--------------------------------------------------------------
			//! @summary   サウンドプレイヤーのポーズ状態の取得
			//!
			//! @parameter [void] なし
			//!
			//! @return    true :ポーズ中
			//! @return    false:ポーズ以外の状態
			//--------------------------------------------------------------
			bool IsPause();


			//--------------------------------------------------------------
			//! @summary   指定した音のポーズ状態の取得
			//!
			//! @parameter [playbackID] プレイバックID
			//!
			//! @return    true :ポーズ中
			//! @return    false:ポーズ以外の状態
			//--------------------------------------------------------------
			bool IsPause(CriAtomExPlaybackId playbackID);


			//--------------------------------------------------------------
			//! @summary   サウンドプレイヤーの停止
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Stop();


			//--------------------------------------------------------------
			//! @summary   指定した音の停止
			//!
			//! @parameter [playbackID] プレイバックID
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Stop(CriAtomExPlaybackId playbackID);


			//--------------------------------------------------------------
			//! @summary   指定した音の再生状態の取得
			//!
			//! @parameter [playbackID] プレイバックID
			//!
			//! @return    true :再生中
			//! @return    false:再生していない
			//--------------------------------------------------------------
			bool IsPlayStateByID(CriAtomExPlaybackId playbackID);


			// <ゲッター関数>
			//--------------------------------------------------------------
			//! @summary   サウンドプレイヤーの取得
			//--------------------------------------------------------------
			inline CriAtomExPlayerHn GetPlayerHandle() const { return m_player; }
		};
	}
}
