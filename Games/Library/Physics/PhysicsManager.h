//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file		PhysicsManager.h
//!
//! @summary	物理マネージャークラスのヘッダファイル
//!
//! @date		2018.11.23
//!
//! @author		深草直斗
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルードの防止 =========================================================
#pragma once



// ヘッダファイルの読み込み =======================================================
// <標準ヘッダファイル>
#include <list>

// <自作ヘッダファイル>
#include "../System/SingletonBase.h"


// 名前空間の定義 ================================================================
namespace Library
{
	// クラスの定義 ==============================================================
	namespace Collision
	{
		class CollisionShape;
		class CollisionInterface;
	}

	namespace Common { class StepTimer; }


	namespace Physics
	{
		// クラスの定義 ==========================================================
		// 剛体
		class RigidBody;


		// クラスの定義 ==========================================================
		class PhysicsManager : public System::SingletonBase<PhysicsManager>
		{
			// <フレンド登録>
			friend class System::SingletonBase<PhysicsManager>;


			// <メンバ変数>
		private:
			// 登録された剛体を保存するリスト
			std::list<RigidBody*> m_rigidBodyList;


			// <コンストラクタ>
		private:
			//--------------------------------------------------------------
			//! @parameter [void] なし
			//--------------------------------------------------------------
			PhysicsManager();


			// <デストラクタ>
		public:
			~PhysicsManager();


			// <メンバ関数>
		public:
			//--------------------------------------------------------------
			//! @summary   初期化処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Intialize();


			//--------------------------------------------------------------
			//! @summary   更新処理
			//!
			//! @parameter [timer] 時間情報
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Update(const Common::StepTimer& timer);


			//--------------------------------------------------------------
			//! @summary   剛体の登録処理
			//!
			//! @parameter [rigidbody] 登録する剛体
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Entry(RigidBody* rigidBody);


			//--------------------------------------------------------------
			//! @summary   剛体を外す処理
			//!
			//! @parameter [rigidBody] はずす剛体
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Remove(RigidBody* rigidBody);
		};
	}
}
