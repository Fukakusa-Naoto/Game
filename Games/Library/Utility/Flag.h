//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file		Flag.h
//!
//! @summary	フラグクラスのヘッダファイル
//!
//! @date		2018.12.04
//!
//! @author		深草直斗
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルードの防止 =========================================================
#pragma once


// 名前空間の定義 ================================================================
namespace Library
{
	namespace Utility
	{
		// クラスの定義 ==========================================================
		class Flag
		{
			// <列挙型の定義>
		public:
			enum INT_SIFT
			{
				FLAG01 = 1 << 0,
				FLAG02 = 1 << 1,
				FLAG03 = 1 << 2,
				FLAG04 = 1 << 3,
				FLAG05 = 1 << 4,
				FLAG06 = 1 << 5,
				FLAG07 = 1 << 6,
				FLAG08 = 1 << 7,
				FLAG09 = 1 << 8,
				FLAG10 = 1 << 9,
				FLAG11 = 1 << 10,
				FLAG12 = 1 << 11,
				FLAG13 = 1 << 12,
				FLAG14 = 1 << 13,
				FLAG15 = 1 << 14,
				FLAG16 = 1 << 15,
				FLAG17 = 1 << 16,
				FLAG18 = 1 << 17,
				FLAG19 = 1 << 18,
				FLAG20 = 1 << 19,
				FLAG21 = 1 << 20,
				FLAG22 = 1 << 21,
				FLAG23 = 1 << 22,
				FLAG24 = 1 << 23,
				FLAG25 = 1 << 24,
				FLAG26 = 1 << 25,
				FLAG27 = 1 << 26,
				FLAG28 = 1 << 27,
				FLAG29 = 1 << 28,
				FLAG30 = 1 << 29,
				FLAG31 = 1 << 30,
				FLAG32 = 1 << 31,
			};


			// <メンバ変数>
		private:
			unsigned int m_flag;


			// <コンストラクタ>
		public:
			//--------------------------------------------------------------
			//! @parameter [void] なし
			//--------------------------------------------------------------
			Flag() : m_flag(0) {}


			// <メンバ関数>
		public:
			//--------------------------------------------------------------
			//! @summary   フラグを立てる
			//!
			//! @parameter [flag] 立てるフラグ
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void On(unsigned int flag)
			{
				m_flag |= flag;
			}


			//--------------------------------------------------------------
			//! @summary   フラグを伏せる
			//!
			//! @parameter [flag] 伏せるフラグ
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Off(unsigned int flag)
			{
				m_flag &= ~flag;
			}

			//--------------------------------------------------------------
			//! @summary   フラグが立っているか調べる
			//!
			//! @parameter [flag] 調べるフラグ
			//!
			//! @return    true :フラグが立っている
			//! @return    false:フラグが立っていない
			//--------------------------------------------------------------
			bool Is(unsigned int flag)
			{
				return (m_flag & flag) != 0;
			}


			// <ゲッター関数>
		public:
			//--------------------------------------------------------------
			//! @summary   フラグの取得
			//--------------------------------------------------------------
			inline unsigned int GetFlge() { return m_flag; }
		};
	}
}