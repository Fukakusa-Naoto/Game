//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file		Framework.h
//!
//! @summary	フレームワークの基底クラスのヘッダファイル
//!
//! @date		2018.09.18
//!
//! @author 	深草直斗
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルードの防止 =========================================================
#pragma once



// ヘッダファイルの読み込み =======================================================
// <プリコンパイル済みヘッダファイル>
#include "../../pch.h"

// <自作ヘッダファイル>
#include "../Common/DeviceResources.h"
#include "../Common/StepTimer.h"


// 名前空間の定義 ================================================================
namespace Library
{
	namespace Framework
	{
		// クラスの定義 ==========================================================
		class Framework : public Common::IDeviceNotify
		{
			// <メンバ変数>
		protected:
			HWND m_hwnd;
			Common::DeviceResources* m_deviceResources;
			Common::StepTimer m_timer;

			// スクリーンサイズ
			int m_screenWidth;
			int m_screenHeight;


			// <コンストラクタ>
		public:
			//--------------------------------------------------------------
			//! @parameter [hInstance]
			//! @parameter [nCmdShow]
			//! @parameter [screenWidth] スクリーンの横幅
			//! @parameter [scereenHeight] スクリーンの高さ
			//! @parameter [titleName] タイトル名
			//--------------------------------------------------------------
			Framework(HINSTANCE hInstance, int nCmdShow, int screenWidth = 1600, int screenHeight = 900, std::wstring titleName = nullptr);


			// <デストラクタ>
		public:
			virtual ~Framework();


			// <メンバ関数>
		public:
			//--------------------------------------------------------------
			//! @summary   初期化処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			virtual void Initialize() = 0;


			//--------------------------------------------------------------
			//! @summary   終了処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			virtual void Finalize() = 0;


			//--------------------------------------------------------------
			//! @summary   基礎ゲームループ処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			virtual void Tick();


			//--------------------------------------------------------------
			//! @summary   Direct3Dリソースクリーンアップの追加処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void OnDeviceLost() override;


			//--------------------------------------------------------------
			//! @summary   デバイスの復帰処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void OnDeviceRestored() override;


			// メッセージ
			//--------------------------------------------------------------
			//! @summary   フレームワークがアクティブウィンドウになっている時の処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void OnActivated();


			//--------------------------------------------------------------
			//! @summary   フレームワークが背景のウィンドウになっている時の処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void OnDeactivated();


			//--------------------------------------------------------------
			//! @summary   フレームワークが停電中(最小化中)の時の処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void OnSuspending();


			//--------------------------------------------------------------
			//! @summary   フレームワークが電源再開(最小化から復帰)された時の処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void OnResuming();


			//--------------------------------------------------------------
			//! @summary   フレームワークウィンドウのサイズが変更された時の処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void OnWindowSizeChanged(int width, int height);


			//--------------------------------------------------------------
			//! @summary   希望のデフォルトウィンドウサイズに変更する
			//!			   (最小サイズは320x200)
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void GetDefaultSize(int& width, int& height) const;


		protected:
			// 更新処理
			virtual void Update(const Common::StepTimer & timer) = 0;


			//--------------------------------------------------------------
			//! @summary   描画前の準備処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void PreRender();


			//--------------------------------------------------------------
			//! @summary   スクリーンへの出力処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void PostRender();


			// 描画処理
			virtual void Render() = 0;


			//--------------------------------------------------------------
			//! @summary   バックバッファをクリアする処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Clear();


			// デバイスの再構築処理
			//--------------------------------------------------------------
			//! @summary   デバイス依存オブジェクトの初期化処理
			//!			   (ウィンドウサイズに関係なく)
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void CreateDeviceDependentResources();


			//--------------------------------------------------------------
			//! @summary   ウィンドウサイズに依存するオブジェクトの初期化処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void CreateWindowSizeDependentResources();


			// <ゲッター関数>
		public:
			//--------------------------------------------------------------
			//! @summary   FPSの取得
			//--------------------------------------------------------------
			unsigned int GetTimer() { return m_timer.GetFramesPerSecond(); }


			// <静的なメンバ関数>
		public:
			//--------------------------------------------------------------
			//! @summary   Windowsへの手続き
			//!
			//! @parameter [hWnd]
			//! @parameter [message]
			//! @parameter [wParam]
			//! @parameter [lParam]
			//!
			//! @return
			//--------------------------------------------------------------
			static LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);

		};
	}
}