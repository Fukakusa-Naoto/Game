//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file		MouseUtil.h
//!
//! @summary	マウス入力クラスのヘッダファイル
//!
//! @date		2018.09.20
//!
//! @author		深草直斗
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルードの防止 =========================================================
#pragma once



// ヘッダファイルの読み込み =======================================================
// <プリコンパイル済みヘッダファイル>
#include "../../pch.h"

// <自作ヘッダファイル>
#include "../System/SingletonBase.h"


// 名前空間の定義 ================================================================
namespace Library
{
	namespace Input
	{
		// クラスの定義 ==========================================================
		class MouseUtil : public System::SingletonBase<MouseUtil>
		{
			// <フレンド登録>
			friend class System::SingletonBase<MouseUtil>;


			// <列挙型の定義>
		public:
			enum Button
			{
				Left,
				Middle,
				Right,

				Num
			};


			// <メンバ変数>
		private:
			// マウス・インスタンス
			DirectX::Mouse* m_mouse;
			// マウスの状態
			DirectX::Mouse::State m_state;
			// マウス状態トラッカー
			DirectX::Mouse::ButtonStateTracker m_buttonStateTracker;
			// 各ボタンの状態を保存する
			bool* m_buttonStates[Button::Num];
			// 各ボタンの状態を保存する(トリガー)
			DirectX::Mouse::ButtonStateTracker::ButtonState* m_buttonTrackerStates[Button::Num];



			// <コンストラクタ>
		private:
			//--------------------------------------------------------------
			//! @parameter [void] なし
			//--------------------------------------------------------------
			MouseUtil();


			// <デストラクタ>
		public:
			~MouseUtil();


			// <メンバ関数>
		public:
			//--------------------------------------------------------------
			//! @summary   更新処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Update();


			//--------------------------------------------------------------
			//! @summary   指定ボタンが押されているか判定を行う
			//!
			//! @parameter [button] キーの指定
			//!
			//! @return    true ：指定ボタンが押されている
			//! @return    false：指定ボタンが押されていない
			//--------------------------------------------------------------
			bool IsPressed(Button button);


			//--------------------------------------------------------------
			//! @summary   指定ボタンが押された瞬間の判定を行う
			//!
			//! @parameter [button] ボタンの指定
			//!
			//! @return    true ：指定ボタンが押された
			//! @return    false：指定ボタンが押されていない
			//--------------------------------------------------------------
			bool IsTriggered(Button button);


			//--------------------------------------------------------------
			//! @summary   指定ボタンが離された瞬間の判定を行う
			//!
			//! @parameter [button] キーの指定
			//!
			//! @return    true ：指定ボタンが離された
			//! @return    false：指定ボタンが離されていない
			//--------------------------------------------------------------
			bool IsReleased(Button button);


			//--------------------------------------------------------------
			//! @summary   ホイール値のリセット
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void ResetWheelValue();


			// <セッター関数>
			//--------------------------------------------------------------
			//! @parameter [window] ウィンドウハンドル
			//--------------------------------------------------------------
			inline void SetWindow(HWND window) { m_mouse->SetWindow(window); }


			//--------------------------------------------------------------
			//! @parameter [mode] 設定するモード
			//--------------------------------------------------------------
			inline void SetMode(DirectX::Mouse::Mode mode) { m_mouse->SetMode(mode); }


			// <ゲッター関数>
			//--------------------------------------------------------------
			//! @summary   マウス座標の取得
			//--------------------------------------------------------------
			inline DirectX::XMINT2 GetPosition() const
			{
				DirectX::XMINT2 pos;
				pos.x = m_state.x;
				pos.y = m_state.y;

				return pos;
			}


			//--------------------------------------------------------------
			//! @summary   マウスのX座標の取得
			//--------------------------------------------------------------
			inline int GetX() const { return m_state.x; }


			//--------------------------------------------------------------
			//! @summary   マウスのY座標の取得
			//--------------------------------------------------------------
			inline int GetY() const { return m_state.y; }


			//--------------------------------------------------------------
			//! @summary   ホイールの回転値の取得
			//--------------------------------------------------------------
			inline int GetWheelValue() const { return m_state.scrollWheelValue; }


			//--------------------------------------------------------------
			//! @summary   マウスモードの取得
			//--------------------------------------------------------------
			inline DirectX::Mouse::Mode GetMode() const { return m_state.positionMode; }

		};
	}
}