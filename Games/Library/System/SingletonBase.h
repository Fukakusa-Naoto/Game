//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file		SingletonBase.h
//!
//! @summary	シングルトンの基底クラスのヘッダファイル
//!
//! @date		2018.09.18
//!
//! @author 	深草直斗
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルードの防止 =========================================================
#pragma once



// ヘッダファイルの読み込み =======================================================
// <標準ヘッダファイル>
#include <memory>


// 名前空間の定義 ================================================================
namespace Library
{
	namespace System
	{
		// クラスの定義 ==========================================================
		template <class T> class SingletonBase
		{
			// <メンバ変数>
		private:
			static std::unique_ptr<T> m_instance;


			// <コンストラクタ>
		protected:
			//--------------------------------------------------------------
			//! @parameter [void] なし
			//--------------------------------------------------------------
			SingletonBase() {};


			// <静的メンバ関数>
		public:
			//--------------------------------------------------------------
			//! @summary   インスタンスの取得
			//!
			//! @parameter [void] なし
			//!
			//! @return    インスタンスのポインタ
			//--------------------------------------------------------------
			static inline T * GetInstance()
			{
				if (!m_instance) m_instance.reset(new T);
				return m_instance.get();
			}


			//--------------------------------------------------------------
			//! @summary   インスタンスの破棄
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			static inline void Reset()
			{
				m_instance.reset();
			}

		};



		// 静的メンバ変数の定義 ===================================================
		template <class T> std::unique_ptr<T> SingletonBase<T>::m_instance(nullptr);
	}
}
