//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file		Animator.h
//!
//! @summary	アニメーションクラスのヘッダファイル
//!
//! @date		2018.11.09
//!
//! @author		深草直斗
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルードの防止 =========================================================
#pragma once



// ヘッダファイルの読み込み =======================================================
// <自作ヘッダファイル>
#include "../../../../Library/Common/StepTimer.h"


// 名前空間の定義 ================================================================
namespace Motos
{
	namespace Play
	{
		namespace Object
		{
			namespace UI
			{
				// クラスの宣言 ==================================================
				class AnimeCrip;


				// クラスの定義 ==================================================
				class Animator
				{
					// <メンバ変数>
				private:
					AnimeCrip* m_animeCrip;
					bool m_animationState;


					// <コンストラクタ>
				public:
					Animator();


					// <デストラクタ>
				public:
					~Animator();


					// <メンバ関数>
				public:
					//------------------------------------------------------
					//! @summary   更新処理
					//!
					//! @parameter [timer] 時間情報
					//!
					//! @return    なし
					//------------------------------------------------------
					void Update(const Library::Common::StepTimer & timer);



					//------------------------------------------------------
					//! @summary   描画処理
					//!
					//! @parameter [void] なし
					//!
					//! @return    なし
					//------------------------------------------------------
					void Render();


					//------------------------------------------------------
					//! @summary   アニメーションの開始処理
					//!
					//! @parameter [void] なし
					//!
					//! @return    なし
					//------------------------------------------------------
					void Play();


					//------------------------------------------------------
					//! @summary   アニメーションの停止処理
					//!
					//! @parameter [void] なし
					//!
					//! @return    なし
					//------------------------------------------------------
					void Stop();


					//------------------------------------------------------
					//! @summary   アニメーションクリップの変更処理
					//!
					//! @parameter [animeCrip] 変更するアニメーションクリップ
					//!
					//! @return    なし
					//------------------------------------------------------
					void ChangeCrip(AnimeCrip* animeCrip);


					// <ゲッター関数>
				public:
					//------------------------------------------------------
					//! @summary   アニメーターの状態の取得
					//------------------------------------------------------
					inline bool GetState() const { return m_animationState; }
				};
			}
		}
	}
}