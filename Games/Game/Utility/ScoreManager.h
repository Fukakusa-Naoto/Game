//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/
//! @file		ScoreManager.h
//!
//! @summary	モトスのスコア管理クラスのヘッダファイル
//!
//! @date		2018.10.31
//!
//! @author		深草直斗
//__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/__/

// 多重インクルードの防止 =========================================================
#pragma once



// ヘッダファイルの読み込み =======================================================
// <自作ヘッダーファイル>
#include "../../Library/System/SingletonBase.h"


// 名前空間の定義 ================================================================
namespace Motos
{
	namespace Utility
	{
		// クラスの定義 ======================================================
		class ScoreManager : public Library::System::SingletonBase<ScoreManager>
		{
			// <フレンド登録>
			friend class Library::System::SingletonBase<ScoreManager>;


			// <メンバ変数>
		private:
			// 最高スコア
			int m_highScore;
			// 現在のスコア
			int m_nowScore;


			// <コンストラクタ>
		public:
			ScoreManager();


			// <デストラクタ>
		public:
			~ScoreManager();


			// <メンバ関数>
		public:
			//--------------------------------------------------------------
			//! @summary   初期化処理
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void Initialize();


			//--------------------------------------------------------------
			//! @summary   スコアに加算
			//!
			//! @parameter [addValue] 加算する値
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void AddScore(int addValue);


			//--------------------------------------------------------------
			//! @summary   ハイスコアの更新
			//!
			//! @parameter [void] なし
			//!
			//! @return    なし
			//--------------------------------------------------------------
			void UpdateHighScore();


			// <ゲッター関数>
		public:
			//--------------------------------------------------------------
			//! @return    最高スコア
			//--------------------------------------------------------------
			inline int GetHighScore()const { return m_highScore; }


			//--------------------------------------------------------------
			//! @return    現在のスコア
			//--------------------------------------------------------------
			inline int GetNowScore() const { return m_nowScore; }
		};
	}
}
